from utils import logger
from trading import TradingEngine
from database import Sqlite
from broker.broker_base import BrokerBase
from uuid import uuid4


class TradingEngineManager:
    '''
    Trading engine manager (TEM) exists in context of one engine manager per client and its broker. Each TEM can have one or more than one engines running. TEM keeps a record of total pnl of a client at a broker and actively keeps making attempts to minimize losses. TEM is responsible for emitting pnl events on a websocket channel that is unique per client and its broker. TEM stops all engines and exits from all positions if target or stoploss is met.
    '''

    def __init__(self, client: BrokerBase):
        '''
        Initialize trading engine manager
        '''
        self.client = client
        self.db = Sqlite()
        self.engines = {}
        self.is_running = False

    async def start(self):
        '''
        Start trading engine manager, 
        '''
        self.client.on_message = self.on_message
        self.client.on_error = self.on_error
        logger.info("Starting Trading Engine Manager")
        self.client.subscribe()
        self.is_running = True

    async def stop(self):
        for engine in self.engines.values():
            await engine.stop()

        # cleanup all open positions and orders generated by this TEMs engines
        engine_ids = self.engines.keys()
        self.client.cleanup(engine_ids=engine_ids)

        logger.info("Stopping Trading Engine Manager")
        self.is_running = False

    async def create_or_update_engine(self, client):
        id = str(uuid4())
        engine = TradingEngine(client=client, id=id)
        self.engines[id] = engine
        pass
